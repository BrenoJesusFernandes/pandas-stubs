name: 'Release Alfa'

on: [push]

jobs:
  check-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
            python-version: "3.10"

      - name: Show current date and time
        run: date

      - name: Check if there is new updates in source code today
        id: check_src_code
        run: |
          amount_commits_today=$(git rev-list HEAD --count --since "00:00" -- "pandas-stubs/*.pyi" -- pyproject.toml ); 
          new_update="false";
          if [ $amount_commits_today -gt 0 ]; then; new_update="true" ; fi;
          echo ::set-output name=new_update::$new_update

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Poetry
        run: pip install poetry

      - name: Install project dependencies
        run: poetry update -vvv

      - name: Build wheel
        run: poetry run poe build_dist

      - name: Download last stub wheel
        run: pip download pandas-stubs -d .download/

      - name: Check if the wheel generate is not equal the last in pypi
        id: check_wheel
        run: |
          diff --brief dist/pandas_stubs*.whl .download/pandas_stubs*.whl >/dev/null
          diff_output=$?
          new_wheel="false"
          if [ $diff_output -eq 0 ]; then; new_wheel="true"; fi; 
          echo ::set-output name=new_wheel::$new_wheel
          

  style-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-release
    if: needs.check-release.outputs.new_update == 'true' && needs.check-release.outputs.new_wheel == 'false'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install Poetry
      run: pip install poetry

    - name: Install project dependencies
      run: poetry update -vvv

    - name: Check style with black
      run: poetry run poe run_black_check

    - name: Check style with isort
      run: poetry run poe run_isort_check

  stub-tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']
    needs: style-check

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install Poetry
      run: pip install poetry

    - name: Install project dependencies
      run: poetry update -vvv

    - name: Run MyPy Against Source Code
      run: poetry run poe run_mypy_src

    - name: Run Pyright Against Source Code
      run: poetry run poe run_pyright_src

    - name: Run Pytest Against Source Code
      run: poetry run poe run_pytest_src

    - name: Build Distribution
      run: poetry run poe build_dist

    - name: Install Distribution
      run: poetry run poe install_dist

    - name: Remove Source Code
      run: poetry run poe remove_src

    - name: Run Pyright Against Distribution
      run: poetry run poe run_pyright_dist

    - name: Run MyPy Against Distribution
      run: poetry run poe run_mypy_dist

  publish-pypi:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: stub-tests

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Poetry
        run: pip install poetry

      - name: Install project dependencies
        run: poetry update -vvv

#      - name: Update distribution version
#        run: poetry run poe build
#
#      - name: Publish PyPi
#        run: poetry publish --username ${{ secrets.PYPI_TOKEN_NAME }} --password ${{ secrets.PYPI_TOKEN }}

  publish-github:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: stub-tests

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Poetry
        run: pip install poetry

      - name: Install project dependencies
        run: poetry update -vvv
#
#      - name: Update distribution version
#        run: poetry run poe build
#
#      - name: Set version and dist files
#        id: vars
#        run: |
#          echo ::set-output name=version::"$(poetry version -s)"
#          wheel_path=(dist/*.whl)
#          echo ::set-output name=wheel_path::$wheel_path
#          echo ::set-output name=wheel_file::$(basename "$wheel_path")
#          sdist_path=(dist/*.tar.gz)
#          echo ::set-output name=sdist_path::$sdist_path
#          echo ::set-output name=sdist_file::$(basename "$sdist_path")
#
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.vars.outputs.version }}
#          release_name: Release ${{ steps.vars.outputs.version }}
#          body_path: "RELEASE.md"
#          draft: false
#          prerelease: false
#
#      - name: Upload Release Wheel
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ${{ steps.vars.outputs.wheel_path }}
#          asset_name: ${{ steps.vars.outputs.wheel_file }}
#          asset_content_type: application/whl
#
#      - name: Upload Release Sdist
#        uses: actions/upload-release-asset@v1#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ${{ steps.vars.outputs.sdist_path }}
#          asset_name: ${{ steps.vars.outputs.sdist_file }}
#          asset_content_type: application/gzip
